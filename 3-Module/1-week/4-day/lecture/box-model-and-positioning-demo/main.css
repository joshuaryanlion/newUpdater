/* 
- How box-sizing: border-box works.
- The values of the display property.
- Be able to implement a box-shadow
- Be able to handle content that overflows.
- Position an element in the page with top/right/bottom/left
*/

/* The box model: everything in css has a box around it */

body {
  background-color: lightgray;
}

h1,
p,
ul,
li,
a {
  border: 1px solid red;
  background-color: white;
}

/* 
3 types of boxes controlled by the display property:
- block: they box will break into a new line and 
you can set width and height
- inline: the box will not break into a new line and
you can't set width and height
- inline-block: the box will not break into a new line but
you can set width and height
*/

h2 {
  border: 1px solid red;
  background-color: white;
  height: 100px;
  width: 200px;
  /* display: inline; */
}

span {
  border: 1px solid red;
  background-color: white;
  height: 100px;
}

.inline-block {
  border: 1px solid red;
  background-color: white;
  height: 100px;
  width: 300px;
  display: inline-block;
}

/* Parts of the box: content, padding, border and margin */
.neighbor1 {
  border: 1px solid red;
  background-color: white;
  display: inline-block;
  padding: 20px;
  border: 10px solid red;
  margin: 100px;
}

.neighbor2 {
  border: 1px solid red;
  background-color: white;
  display: inline-block;
}

/* 
Standard CSS box model, width and height are for content only 
In box-sizing: border-box, it also includes padding, and border
*/
.standard {
  width: 178px;
  height: 178px;
  padding: 10px;
  border: 1px solid red;
  background-color: white;
}

.border-box {
  border:  10px solid black; /* Applies to all four sides. */
  box-sizing: border-box;
  height:  100px; /* Sum of content + top/bottom padding + top/bottom border */
  margin:  50px;  /* Applies to all four sides. */
  padding: 25px;  /* Applies to all four sides. */
  width:   200px; /* Sum of content + left/right padding + left/right border */
}

/* 
- margin top right bottom left
- border top right bottom left and shorthand for width style and color
- padding top right bottom left
- give something a box shadow (horizontal offset, vertical, blur radius and color)
*/
.box-playground {
  background-color: white;
  display: inline-block;
  width: 100px;
  height: 100px;

  /* margin: 100px; */
  margin-top: 100px;
  margin-right: 100px;
  margin-bottom: 100px;
  margin-left: 100px;

  /* border: 5px dotted red; */
  /* border-top: 5px dotted red;
  border-right: 5px dotted red;
  border-bottom: 5px dotted red;
  border-left: 5px dotted red; */
  /* border-width: 5px;
  border-style: dotted;
  border-color: red; */

  padding: 20px;
  /* padding-top: 20px;
  padding-right: 20px;
  padding-bottom: 20px;
  padding-left: 20px; */

  /* box-shadow: -4px px green; */

  overflow: scroll;
}

.box-playground-neighbor {
  /* border: 1px solid red;
  background-color: white;
  display: inline-block;
  width: 200px;
  height: 200px; */
}

.box-playground-neighbor2 {
  /* border: 1px solid red;
  background-color: white;
  width: 200px;
  height: 200px; */
}

/* The position CSS property sets how an element 
is positioned in a document. */


/* static is the default, not considered to be positioned on the page 
      will appear normally according to the page flow
  relative remains in its original position in the page flow, but can be
      offset using top, right, bottom, and left 'relative to its original 
      place'
  !!!!absolute positined is removed from the page flow!!!!
      other elements around it behave as if its not there
  fixed is removed from the page flow and acts like an absolutely positioned
    element the difference is fixed element is relative to the html doc
     itself and not an ancestor element stays in the same spot regardless 
     of the size and whether a user scrolls
  sticky element remains in its original position in the page flow and is
    positioned relative to its closest block level ancestor  and any 
    scrolling anscestors
*/
.boxes-container {
  border: 1px solid red;
  position: relative;
}

.yellow-box {
  width: 100px;
  height: 100px;
  display: inline-block;
  background-color: lightyellow;
  border: 5px solid yellow;
  margin: 10px;
}

.red-box {
  width: 100px;
  height: 100px;
  display: inline-block;
  background-color: pink;
  border: 5px solid red;
  margin: 10px;

  /* position: static; */
  /* position: relative;
  top: 40px;
  left: 400px; */

  /* position: absolute; */
  /* top: 40px; */
  /* left: 40px; */

  /* position: fixed;
  top: 40px;
  left: 40px; */
}

/* 
sticky, The element is positioned according 
to the normal flow of the document, and then offset 
relative to its nearest scrolling ancestor and 
containing block (nearest block-level ancestor) 
*/
.subheading {
  position: sticky;
  top: 0;
  left: 0;
  width: 110%
}
